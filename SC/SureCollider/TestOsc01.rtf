{\rtf1\ansi\ansicpg932\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 (\
n=NetAddr("localhost",8000);\
\
o=OSCresponderNode(n,'/circle/position',\{\
	|t,r,msg|("time:"+t).postln;msg[3].postln;\
	msg.postln;\
	\
	\
	\
	\
	\}).add;\
	\
 \
 \
)\
SynthDef("reverb",\{\
	arg wet=1.0;\
	var in,fx;\
	in=In.ar(0,2);\
	fx=in;\
	fx=GVerb.ar(fx,80);\
	ReplaceOut.ar(0,fx);	\
	\}).store\
\
SynthDef("baseSound",\{\
	arg note=40,amp=0.1,fadein=12.0;\
	var env,out;\
	env=EnvGen.kr(Env.new([0,amp],[fadein]));\
	out=RLPF.ar(LFPulse.ar([note,note+7].midicps,0.15),SinOsc.kr(0.1,0,10,72).midicps,0.1,0.1);\
	Out.ar(0,out*env);\
	\}).store\
\
SynthDef("newring",\{\
	arg note=40,amp=0.5,pan=0.0,decay=4.0;\
	var env1,out1,env2,out2,mix;\
	out1=RLPF.ar(LFPulse.ar([note,note+7].midicps,0.15),SinOsc.kr(0.1,0,10,72).midicps,0.1,0.1);\
	out2=SinOsc.ar([(note+48).midicps,(note+55).midicps]);\
	env1=EnvGen.kr(Env.perc(decay/4.0,decay/4.0*3.0,amp,-4),doneAction:2);\
	env2=EnvGen.kr(Env.adsr(0.001,0.4,0.0,decay,amp*0.1,-4));\
	mix=(out1*env1)+(out2*env2);\
	mix=CombN.ar(mix,0.31,0.31,2,0.5,mix);\
	Out.ar(0,mix);\
	\
	\}).play;\
)\
\
\
\{SinOsc.ar(100)\}.play\
\
a=Synth("newring")\
b=Synth("baseSound")\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs30 \cf0 // Define "pulse" synthdef.\
(\
SynthDef("pulse", \{ arg freq = 440, rate = 2, amp = 0.5;\
	var osc, trg;\
	trg = Decay2.ar(Impulse.ar(rate,0, 0.3), 0.01, 0.3, amp);\
	osc = \{SinOsc.ar(freq,0, trg)\}.dup;\
	Out.ar(0, osc);\
\}).writeDefFile;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs30 \cf0 // Define "play" responder.\
r = OSCresponder(nil,"colorplay",\
\{\
	arg time,responder,msg;\
	var note, hue, brightness, color;\
	note = msg[1];	// midi note number\
	Synth(\\SawPerc, [\\note, note]);\
	hue = (note % 12) / 12;\
	brightness = (floor(note / 12) / 10);\
	color = Color.hsv(hue, 1.0-brightness, 1.0, 1.0);\
	\{w.view.background = color\}.defer;\
	\
	// add clock\
	AppClock.sched(0.5,\{\
	w.view.background = Color.black;\
	\});\
	\
r = OSCresponder(nil,"colorplay",\
\{\
	arg time,responder,msg;\
	var note, hue, brightness, color;\
	note = msg[1];	// midi note number\
	Synth(\\SawPerc, [\\note, note]);\
	hue = (note % 12) / 12;\
	brightness = (floor(note / 12) / 10);\
	color = Color.hsv(hue, 1.0-brightness, 1.0, 1.0);\
	\{w.view.background = color\}.defer;\
	\
	// add clock\
	AppClock.sched(0.5,\{\
	w.view.background = Color.black;\
	\});\
		\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
	\
\}).add;\
}