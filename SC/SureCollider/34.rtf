{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 // @@@@ Basic @@@@\cf0 \
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 SinOsc\cf0 .ar(200, 0.1, 1.0);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 SinOsc\cf0 .ar(200, 0.1, 0.5);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
	\cf2 // [ 1_*, audio, [ 0_SinOsc, 0.5 ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 SinOsc\cf0 .ar(200) + \cf3 SinOsc\cf0 .ar(300);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 300, 0 ] ]\cf0 \
	\cf2 // [ 2_+, audio, [ 0_SinOsc, 1_SinOsc ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 SinOsc\cf0 .ar(200, 0.1, 0.5) + \cf3 SinOsc\cf0 .ar(300);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 300, 0 ] ]\cf0 \
	\cf2 // [ 2_MulAdd, audio, [ 0_SinOsc, 0.5, 1_SinOsc ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 SinOsc\cf0 .ar(200, 0.1, 0.5) + \cf3 SinOsc\cf0 .ar(300, 0.2, 0.3);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0.1 ] ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 300, 0.2 ] ]\cf0 \
	\cf2 // [ 2_*, audio, [ 1_SinOsc, 0.3 ] ]\cf0 \
	\cf2 // [ 3_MulAdd, audio, [ 0_SinOsc, 0.5, 2_* ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 var\cf0  o1;\
	o1 = \cf3 SinOsc\cf0 .ar(200);\
	o1 = \cf3 LPF\cf0 .ar(o1, 400);\
	\cf3 SinOsc\cf0 .ar(o1) + \cf3 Saw\cf0 .ar(o1);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
	\cf2 // [ 1_LPF, audio, [ 0_SinOsc, 400 ] ]\cf0 \
	\cf2 // [ 2_SinOsc, audio, [ 1_LPF, 0 ] ]\cf0 \
	\cf2 // [ 3_Saw, audio, [ 1_LPF ] ]\cf0 \
	\cf2 // [ 4_+, audio, [ 2_SinOsc, 3_Saw ] ]\cf0 \
\
\
\
\cf2 // @@@@ Control @@@@\cf0 \
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\cf3 |val1=100, val2=200|\cf0 \
	\cf3 SinOsc\cf0 .ar(val1, val2, 1.0);\
\}).dumpUGens;\
\
	\cf2 // [ 0_Control, control, nil ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 0_Control[0], 0_Control[1] ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\cf3 |val1=100|\cf0 \
	\cf3 var\cf0  c2;\
	c2 = \cf3 Control\cf0 .names(\cf4 \\testC\cf0 ).kr([0.1, 0.2, 0.3]);\
	\cf3 SinOsc\cf0 .ar(val1, c2[0]);\
\}).dumpUGens;\
\
	\cf2 // [ 0_Control, control, nil ]\cf0 \
	\cf2 // [ 1_Control, control, nil ]\cf0 \
	\cf2 // [ 2_SinOsc, audio, [ 0_Control[0], 1_Control[0] ] ]\cf0 \
\
\
\
\cf2 // @@@@ Array @@@@\cf0 \
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 SinOsc\cf0 .ar([200, 300, 400], 0.0, 1.0);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 300, 0 ] ]\cf0 \
	\cf2 // [ 2_SinOsc, audio, [ 400, 0 ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 Mix\cf0 .new(\cf3 SinOsc\cf0 .ar([200, 300, 400], 0.0, 1.0));\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 200, 0 ] ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 300, 0 ] ]\cf0 \
	\cf2 // [ 2_+, audio, [ 0_SinOsc, 1_SinOsc ] ]\cf0 \
	\cf2 // [ 3_SinOsc, audio, [ 400, 0 ] ]\cf0 \
	\cf2 // [ 4_+, audio, [ 2_+, 3_SinOsc ] ]\cf0 \
\
\
\
\cf2 // @@@@ Other @@@@\cf0 \
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 var\cf0  env;\
	env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .new([0.21, 0.22, 0.23], [0.33, 0.34]), 1);\
	\cf3 SinOsc\cf0 .ar(env);\
\}).dumpUGens;\
\
	\cf2 // [ 0_EnvGen, control, [ 1, 1, 0, 1, 0, 0.21, 2, -99, -99, 0.22, 0.33, 1, 0, 0.23, 0.34, 1, 0 ] ]\cf0 \
	\cf2 // [ 1_SinOsc, audio, [ 0_EnvGen, 0 ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 Klank\cf0 .ar(`[[100,200,300], [0.1,0.2,0.3], [1.1,2.1,3.1]], \{\cf3 WhiteNoise\cf0 .ar(0.1)\})\
\}).dumpUGens;\
\
	\cf2 // [ 0_WhiteNoise, audio, [  ] ]\cf0 \
	\cf2 // [ 1_*, audio, [ 0_WhiteNoise, 0.1 ] ]\cf0 \
	\cf2 // [ 2_Klank, audio, [ 1_*, 1, 0, 1, 100, 0.1, 1.1, 200, 0.2, 2.1, 300, 0.3, 3.1 ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 var\cf0  freq, hasFreq;\
	# freq, hasFreq = \cf3 Pitch\cf0 .kr(\cf3 SinOsc\cf0 .ar(400));\
	\cf3 SinOsc\cf0 .ar(freq, 0, hasFreq);\
\}).dumpUGens;\
\
	\cf2 // [ 0_SinOsc, audio, [ 400, 0 ] ]\cf0 \
	\cf2 // [ 1_Pitch, control, [ 0_SinOsc, 440, 60, 4000, 100, 16, 1, 0.01, 0.5, 1 ] ]\cf0 \
	\cf2 // [ 2_SinOsc, audio, [ 1_Pitch[0], 0 ] ]\cf0 \
	\cf2 // [ 3_*, audio, [ 2_SinOsc, 1_Pitch[1] ] ]\cf0 \
\
\
\cf3 SynthDef\cf0 (\cf4 \\test\cf0 , \{\
	\cf3 Demand\cf0 .kr(\cf3 Impulse\cf0 .kr, 1, \cf3 Dseq\cf0 ([\cf3 Dseries\cf0 (2, 3, 4), \cf3 Diwhite\cf0 (5, 6, 7), 8], 9));\
\}).dumpUGens;\
\
	\cf2 // [ 0_Impulse, control, [ 440, 0 ] ]\cf0 \
	\cf2 // [ 1_Dseries, demand, [ 4, 2, 3 ] ]\cf0 \
	\cf2 // [ 2_Diwhite, demand, [ 7, 5, 6 ] ]\cf0 \
	\cf2 // [ 3_Dseq, demand, [ 9, 1_Dseries, 2_Diwhite, 8 ] ]\cf0 \
	\cf2 // [ 4_Demand, control, [ 0_Impulse, 1, 3_Dseq ] ]}