{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 (\
d = \cf2 SynthDef\cf0 (\cf3 \\demandTest\cf0 , \{\
	\cf2 arg\cf0  outBus=0, rate=8, reset=0,\
	bassSeqL = 16;\
	\cf2 var\cf0  output;\
	\cf2 var\cf0  trigS;\
	\cf2 var\cf0  seqA, trigA, pitchA, aEnvA, outputA;\
	\cf2 var\cf0  seqB, trigB, pitchB, aEnvB, outputB;\
	\cf2 var\cf0  seqC, trigC, pitchC, aEnvC, outputC;\
	\
	\cf4 // Main seqTriggerPulse\cf0 \
	trigS = \cf2 Impulse\cf0 .kr( rate );\
	\cf4 // trigS = Dust.kr( 12 );\cf0 \
	\
	\
	\cf4 // A(Kick)\cf0 \
	seqA = \cf2 Demand\cf0 .kr(trigS, reset, \cf2 Dseq\cf0 ([1,0,0,0, 0,0,1,1, 0,0,1,1, 0,0,0,1], \cf2 inf\cf0 ));\
	trigA = trigS * seqA;\
	\
	pitchA = \cf2 EnvGen\cf0 .ar( \cf2 Env\cf0 .perc(0, 0.1, 1, -5), trigA, 20, 30 );\
	aEnvA =  \cf2 EnvGen\cf0 .ar( \cf2 Env\cf0 .perc(0.001, 0.1, 1, -5), trigA, 1, 0 );\
	\
	outputA = \cf2 SinOsc\cf0 .ar(pitchA.midicps, 0.0, aEnvA);\
	\
	\
	\cf4 // B(HatSnare)\cf0 \
	seqB = \cf2 Demand\cf0 .kr(trigS, reset,\
		\cf2 Dseq\cf0 ([ 0.1, 0.05, 0.1, 0.15, 0.25, 0.15, 0.05, 0.1, 0.05, 0.1, 0.15, 0.05, 0.25, 0.15, 0.05, 0.1 ], \cf2 inf\cf0 )\
		);\
	trigB = trigS * seqB;\
	\
	aEnvB =  \cf2 Decay2\cf0 .kr(trigB, 0.01, seqB, 1.0);\
	\
	outputB = \cf2 LFNoise0\cf0 .ar(3000);\
	outputB = \cf2 HPF\cf0 .ar(outputB, 2000, aEnvB);\
	\
	\
	\cf4 // C(Bass)\cf0 \
	seqC = \cf2 Demand\cf0 .kr(trigS, reset,\
		\cf2 Dseq\cf0 ([\
			\cf2 Dser\cf0 (\cf2 Control\cf0 .names([\cf3 \\bassSeq\cf0 ]).kr([ 40, 40, 42, 47, 40, 35, 0, 23, 0, 40, 28, 42, 28, 45, 0, 28]), bassSeqL)\
		], \cf2 inf\cf0 ));\
	trigC = trigS * (seqC>0);\
	pitchC = \cf2 Latch\cf0 .kr(seqC, trigC);\
	\
	aEnvC =  \cf2 EnvGen\cf0 .ar( \cf2 Env\cf0 .perc(0.001, 0.1, 1, -5), trigC, 0.4);\
	\
	outputC = \cf2 LFPulse\cf0 .ar(pitchC.midicps, 0.0, 0.55, aEnvC);\
	\
	\
	\cf4 // Mix\cf0 \
	output = outputA + outputB + outputC;\
	\
	\cf2 Out\cf0 .ar(outBus, [output, output]);\
\}, [\cf2 nil\cf0 , \cf2 nil\cf0 , \cf3 \\tr\cf0 ]).send(s);\
)\
\
\
\
a = \cf2 Synth\cf0 (\cf3 \\demandTest\cf0 );\
a.set(\cf3 \\reset\cf0 , 1); \cf4 // \\tr Trigger Rate Control generates impulse\cf0 \
a.set(\cf3 \\reset\cf0 , 1);\
a.set(\cf3 \\reset\cf0 , 1);\
\
a.set(\cf3 \\rate\cf0 , (160/60*4) );\
a.set(\cf3 \\rate\cf0 , 120 ); \cf4 // loud\cf0 \
a.set(\cf3 \\rate\cf0 , (140/60*4) );\
\
\cf4 // change bassSeq, but sequence duration does not change\cf0 \
a.setn(\cf3 \\bassSeq\cf0 , [40, 42, 43, 47, 52, 40, 38, 50]);\
a.setn(\cf3 \\bassSeq\cf0 , [64, 52, 40]);\
\
\cf4 // "Control.names([\\CONTROLNAME]).kr(ARRAY)" just generates plural Controls, maybe\cf0 \
\cf4 // see UgenGraph & Controls\cf0 \
d.dumpUGens;\
\
\cf4 // Dseq([Dser([1,2,3,4,5,6,7,8]), seqLength], inf)\cf0 \
a.set(\cf3 \\bassSeqL\cf0 , 3);\
a.set(\cf3 \\bassSeqL\cf0 , 4);\
a.set(\cf3 \\bassSeqL\cf0 , 6);\
a.set(\cf3 \\bassSeqL\cf0 , 16);\
\
a.set(\cf3 \\reset\cf0 , 1);}